#ifndef QLEGOCOMMON_H
#define QLEGOCOMMON_H

#include <QtCore/QtEndian>
#include <QtCore/QtGlobal>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtBluetooth/QBluetoothDeviceInfo>
#include <QtBluetooth/QBluetoothUuid>
#include <QtBluetooth/QLowEnergyService>

QT_BEGIN_NAMESPACE

static const auto LPF2_SERVICE = QStringLiteral("00001623-1212-efde-1623-785feabcd123");
static const auto LPF2_CHARACTERISTIC = QStringLiteral("00001624-1212-efde-1623-785feabcd123");

enum ManufacturerData
{
    DuploTrain = 32,
    MoveHub = 64,
    BasicHub = 65,
    RemoteControl = 66,
    Mario = 67,
    TechnicHub = 128
};

typedef QMap<QString, int> PortMap;

static inline QString decodeVersion(const QByteArray &bytes)
{
    QString version("");
    bool ok;
    quint32 hex = bytes.toInt(&ok, 16);
    if (ok) {
        const auto versionNumber = qToBigEndian<quint32>(hex);
        auto str = QString::number(versionNumber, 16).rightJustified(8, '0');
        const auto major = str[0];
        const auto minor = str[1];
        const auto bugFix = str.mid(2, 2);
        const auto build = str.right(4);
        version = QString("%1.%2.%3.%4").arg(major).arg(minor).arg(bugFix).arg(build);
    }
    return version;
}

static inline QString toHex(int value, int length = 2)
{
    return QString::number(value, 16).rightJustified(length, '0');
}

static inline QString toBin(int value, int length = 8)
{
    return QString::number(value, 2).rightJustified(length, '0');
}

static inline qint8 mapSpeed(qint8 speed)
{
    if (speed == 127) {
        return 127;
    }
    if (speed > 100) {
        speed = 100;
    } else if (speed < -100) {
        speed = -100;
    }
    return speed;
}

static inline int normalizeAngle(int angle)
{
    if (angle >= 180) {
        return angle - (360 * ((angle + 180) / 360));
    } else if (angle < -180) {
        return angle + (360 * ((180 - angle) / 360));
    }
    return angle;
}

static inline int roundAngleToNearest90(int angle)
{
    const int rounded = normalizeAngle(angle);
    if (rounded < -135) {
        return -180;
    }
    if (rounded < -45) {
        return -90;
    }
    if (rounded < 45) {
        return 0;
    }
    if (rounded < 135) {
        return 90;
    }
    return -180;
}

static PortMap BoostPortMap = { { "A", 0 },
                                { "B", 1 },
                                { "C", 2 },
                                { "D", 3 },
                                { "HUB_LED", 50 },
                                { "TILT_SENSOR", 58 },
                                { "CURRENT_SENSOR", 59 },
                                { "VOLTAGE_SENSOR", 60 } };

static inline QString getAddress(const QBluetoothDeviceInfo &info)
{
#ifdef Q_OS_MAC
    // On OS X and iOS we do not have addresses,
    // only unique UUIDs generated by Core Bluetooth.
    return info.deviceUuid().toString();
#else
    return info.address().toString();
#endif
}

static inline QString getUuid(QBluetoothUuid uuid)
{
    bool success = false;
    const quint16 result16 = uuid.toUInt16(&success);
    if (success) {
        return QStringLiteral("0x") + QString::number(result16, 16);
    }

    const quint32 result32 = uuid.toUInt32(&success);
    if (success) {
        return QStringLiteral("0x") + QString::number(result32, 16);
    }

    return uuid.toString().remove(QLatin1Char('{')).remove(QLatin1Char('}'));
}

static inline QString getUuidUnused(QLowEnergyService *service)
{
    bool success = false;
    const QBluetoothUuid uuid = service->serviceUuid();
    const quint16 result16 = uuid.toUInt16(&success);
    if (success) {
        return QStringLiteral("0x") + QString::number(result16, 16);
    }

    const quint32 result32 = uuid.toUInt32(&success);
    if (success) {
        return QStringLiteral("0x") + QString::number(result32, 16);
    }

    return uuid.toString().remove(QLatin1Char('{')).remove(QLatin1Char('}'));
}

static inline QString getServiceUuid(QLowEnergyService *service)
{
    bool success = false;
    const QBluetoothUuid uuid = service->serviceUuid();
    return getUuid(uuid);
}

QT_END_NAMESPACE

#endif // QLEGOCOMMON_H
